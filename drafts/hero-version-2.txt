"use client";

import { motion } from "framer-motion";
import { Canvas } from "@react-three/fiber";
import { OrbitControls, Sphere, Box, Text3D, Float } from "@react-three/drei";
import Link from "next/link";
import {
  Calendar,
  CheckCircle,
  Clock,
  BarChart,
  ListTodo,
  Target,
  Zap,
  Users,
  Bell,
  Settings,
  LucideIcon,
  Sun,
  Moon,
  Menu,
  X,
  HelpCircle,
  MessageSquare,
  Bookmark,
} from "lucide-react";
import Image from "next/image";
import React, { useState, useEffect, createContext } from "react";

// Theme context
const ThemeContext = createContext({
  theme: "dark",
  toggleTheme: () => {},
});

// Theme provider component
const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState("dark");

  useEffect(() => {
    // Check if user has a theme preference in localStorage
    const savedTheme = localStorage.getItem("theme") || "dark";
    setTheme(savedTheme);
    document.documentElement.classList.toggle("dark", savedTheme === "dark");
  }, []);

  const toggleTheme = () => {
    const newTheme = theme === "dark" ? "light" : "dark";
    setTheme(newTheme);
    localStorage.setItem("theme", newTheme);
    document.documentElement.classList.toggle("dark", newTheme === "dark");
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

// Navbar component
const Navbar = () => {
  const { theme, toggleTheme } = React.useContext(ThemeContext);
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  return (
    <nav className="fixed top-0 left-0 right-0 z-50 bg-white/10 backdrop-blur-lg dark:bg-gray-900/80 border-b border-gray-200 dark:border-gray-800">
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between h-16">
          <div className="flex items-center">
            <Link href="/" className="flex items-center">
              <Calendar className="w-8 h-8 text-blue-500" />
              <span className="ml-2 text-xl font-bold text-gray-900 dark:text-white">
                TaskMaster
              </span>
            </Link>
          </div>

          {/* Desktop menu */}
          <div className="hidden md:flex items-center space-x-4">
            <Link
              href="/features"
              className="text-gray-700 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-400"
            >
              Features
            </Link>
            <Link
              href="/pricing"
              className="text-gray-700 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-400"
            >
              Pricing
            </Link>
            <Link
              href="/about"
              className="text-gray-700 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-400"
            >
              About
            </Link>
            <button
              onClick={toggleTheme}
              className="p-2 rounded-full text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-800"
            >
              {theme === "dark" ? (
                <Sun className="w-5 h-5" />
              ) : (
                <Moon className="w-5 h-5" />
              )}
            </button>
            <Link
              href="/sign-in"
              className="px-4 py-2 text-gray-700 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-400"
            >
              Sign In
            </Link>
            <Link
              href="/sign-up"
              className="px-4 py-2 bg-blue-500 text-white rounded-full hover:bg-blue-600 transition-colors"
            >
              Sign Up
            </Link>
          </div>

          {/* Mobile menu button */}
          <div className="md:hidden flex items-center">
            <button
              onClick={toggleTheme}
              className="p-2 rounded-full text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-800 mr-2"
            >
              {theme === "dark" ? (
                <Sun className="w-5 h-5" />
              ) : (
                <Moon className="w-5 h-5" />
              )}
            </button>
            <button
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="p-2 rounded-full text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-800"
            >
              {isMenuOpen ? (
                <X className="w-5 h-5" />
              ) : (
                <Menu className="w-5 h-5" />
              )}
            </button>
          </div>
        </div>
      </div>

      {/* Mobile menu */}
      {isMenuOpen && (
        <div className="md:hidden bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800">
          <div className="container mx-auto px-4 py-4 space-y-4">
            <Link
              href="/features"
              className="block text-gray-700 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-400"
            >
              Features
            </Link>
            <Link
              href="/pricing"
              className="block text-gray-700 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-400"
            >
              Pricing
            </Link>
            <Link
              href="/about"
              className="block text-gray-700 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-400"
            >
              About
            </Link>
            <Link
              href="/sign-in"
              className="block text-gray-700 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-400"
            >
              Sign In
            </Link>
            <Link
              href="/sign-up"
              className="block px-4 py-2 bg-blue-500 text-white rounded-full hover:bg-blue-600 transition-colors text-center"
            >
              Sign Up
            </Link>
          </div>
        </div>
      )}
    </nav>
  );
};

interface FloatingIconProps {
  icon: LucideIcon;
  className?: string;
  delay?: number;
}

const FloatingIcon = ({
  icon: Icon,
  className = "",
  delay = 0,
}: FloatingIconProps) => {
  return (
    <motion.div
      initial={{ y: 0, x: 0 }}
      animate={{
        y: [0, -15, 0],
        x: [0, 5, 0],
        rotate: [0, 5, 0],
      }}
      transition={{
        duration: 4,
        repeat: Infinity,
        delay: delay,
        ease: "easeInOut",
      }}
      className={className}
    >
      <Icon className="w-8 h-8 text-white/80" />
    </motion.div>
  );
};

// New Hero Section with image on right side
const NewHeroSection = () => {
  return (
    <div className="relative min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-gray-900 dark:via-blue-900 dark:to-indigo-900 overflow-hidden pt-16">
      {/* Floating Icons */}
      <div className="absolute top-20 left-20">
        <FloatingIcon icon={Calendar} delay={0} />
      </div>
      <div className="absolute top-40 right-20">
        <FloatingIcon icon={ListTodo} delay={0.5} />
      </div>
      <div className="absolute bottom-40 left-20">
        <FloatingIcon icon={Target} delay={1} />
      </div>
      <div className="absolute bottom-20 right-20">
        <FloatingIcon icon={Zap} delay={1.5} />
      </div>

      {/* Content */}
      <div className="container mx-auto px-4 py-20">
        <div className="flex flex-col md:flex-row items-center justify-between">
          {/* Left side content */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.8 }}
            className="md:w-1/2 mb-12 md:mb-0"
          >
            <div className="flex items-center mb-6">
              <motion.div
                whileHover={{ scale: 1.1, rotate: 360 }}
                transition={{ duration: 0.5 }}
                className="w-16 h-16 bg-blue-500/10 dark:bg-white/10 backdrop-blur-lg rounded-full flex items-center justify-center mr-4"
              >
                <Calendar className="w-8 h-8 text-blue-500 dark:text-white" />
              </motion.div>
              <h2 className="text-xl font-semibold text-blue-500 dark:text-blue-400">
                Task Management Made Simple
              </h2>
            </div>

            <h1 className="text-5xl md:text-6xl font-bold mb-6 text-gray-900 dark:text-white">
              Organize Your Tasks{" "}
              <span className="text-blue-500 dark:text-blue-400">
                Efficiently
              </span>
            </h1>

            <p className="text-xl mb-8 text-gray-600 dark:text-gray-300 leading-relaxed">
              Transform your productivity with our intelligent task management
              system. Stay organized, meet deadlines, and achieve more with
              TaskMaster Pro.
            </p>

            <div className="flex flex-wrap gap-4 mb-8">
              {[
                { icon: CheckCircle, text: "Smart Task Management" },
                { icon: Clock, text: "Real-time Updates" },
                { icon: BarChart, text: "Progress Analytics" },
              ].map((item, index) => (
                <motion.div
                  key={index}
                  whileHover={{ y: -5 }}
                  className="flex items-center gap-2 bg-white dark:bg-gray-800 shadow-md px-4 py-2 rounded-full"
                >
                  <item.icon className="w-5 h-5 text-blue-500 dark:text-blue-400" />
                  <span className="text-gray-700 dark:text-gray-200">
                    {item.text}
                  </span>
                </motion.div>
              ))}
            </div>

            <div className="flex flex-col sm:flex-row gap-4">
              <motion.div
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="inline-block"
              >
                <Link
                  href="/sign-up"
                  className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-full transition-all shadow-lg hover:shadow-xl inline-block w-full text-center"
                >
                  Get Started Free
                </Link>
              </motion.div>
              <motion.div
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                className="inline-block"
              >
                <Link
                  href="/demo"
                  className="bg-white dark:bg-gray-800 hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-900 dark:text-white font-bold py-3 px-6 rounded-full transition-all shadow-lg hover:shadow-xl inline-block w-full text-center border border-gray-200 dark:border-gray-700"
                >
                  Watch Demo
                </Link>
              </motion.div>
            </div>
          </motion.div>

          {/* Right side image */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="md:w-1/2"
          >
            <div className="relative">
              <div className="absolute -top-10 -left-10 w-20 h-20 bg-blue-500/20 dark:bg-blue-400/20 rounded-full blur-xl"></div>
              <div className="absolute -bottom-10 -right-10 w-20 h-20 bg-purple-500/20 dark:bg-purple-400/20 rounded-full blur-xl"></div>
              <div className="relative z-10 bg-white dark:bg-gray-800 rounded-2xl shadow-2xl overflow-hidden">
                <Image
                  src="/iphone.png"
                  alt="TaskMaster Dashboard"
                  width={600}
                  height={400}
                  className="w-full h-auto"
                />
              </div>
            </div>
          </motion.div>
        </div>
      </div>
    </div>
  );
};

const LandingPage = () => {
  return (
    <ThemeProvider>
      <div className="dark:bg-gray-900">
        <Navbar />
        <NewHeroSection />
      </div>
    </ThemeProvider>
  );
};

export default LandingPage;
