// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
} 

model User {
  id                String          @id           @default(uuid())
  email             String          @unique
  clerkId           String          @unique
  username          String    
  firstname         String
  lastname          String
  profilePicture    String?
  createdAt         DateTime                      @default(now())
  updatedAt         DateTime        @updatedAt
  tasks             Tasks[]
  attachments       Attachments[]
  workspaces        Workspace[]     @relation("WorkspaceUsers")
  ownedWorkspaces   Workspace[]     @relation("WorkspaceOwner")
  workspaceMemberships WorkspaceMember[]
  name              String?
  imageUrl          String?
  jobTitle          String?
  department        String?
  bio               String?
  phoneNumber       String?
  isPro             Boolean         @default(false)
}

model Workspace{
  id                String          @id           @default(uuid())
  name              String
  description       String?
  imageUrl          String?
  type              WorkspaceType   @default(PERSONAL)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  users             User[]          @relation("WorkspaceUsers")
  tasks             Tasks[]    
  companyName       String?
  companySize       String?
  companyDomain     String?
  isPro             Boolean         @default(false)
  subscriptionEndsAt DateTime?
  ownerId           String
  owner             User            @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members           WorkspaceMember[]
  tags              Tag[]           @relation("WorkspaceTags")
}

model Tasks {
  id                String          @id           @default(uuid())
  title             String
  description       String
  completed         Boolean         @default(false)
  priority          priorityEnum
  dueDate           DateTime?       // Optional
  userId            String          
  user              User            @relation(fields: [userId], references: [id])
  workspaceId       String          // Keep required
  workspace         Workspace       @relation(fields: [workspaceId], references: [id])
  tags              Tag[]           @relation("TaskTags")
  taskVersions      TaskVersion[] 
  subTaskId         String?
  subTasks          Tasks?          @relation("TaskSubtasks", fields: [subTaskId], references: [id])
  parentTask        Tasks[]         @relation("TaskSubtasks")
  attachments       Attachments[]
  subtasks          SubTask[]
  createdAt         DateTime        @default(now())
}

model Tag {
  id                String          @id           @default(uuid())
  name              String          @unique       // Tag name like Work, Personal
  tasks             Tasks[]          @relation("TaskTags") // Many-to-many relation to tasks
  color             String          @default("#3b82f6") // Default blue color
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  workspaceId       String
  workspace         Workspace       @relation("WorkspaceTags", fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Attachments{
  id                String          @id           @default(uuid())
  url               String
  filename          String
  attachmentType    AttachmentTypeEnum  
  mimeType          String
  fileSize          Int
  taskId            String
  userId            String
  taskVersionId     String
  tasks             Tasks           @relation(fields: [taskId],references: [id])
  user              User            @relation(fields: [userId], references: [id])
  taskVersion       TaskVersion     @relation(fields: [taskVersionId],references: [id])
  createdAt         DateTime                      @default(now())
}

model TaskVersion {
  id                String          @id           @default(uuid())
  taskId            String
  version           Int                           @default(1)
  description       String
  createdAt         DateTime                      @default(now())
  task              Tasks           @relation(fields: [taskId], references: [id])
  attachments       Attachments[]
}

enum priorityEnum{
  low
  medium
  high
  no_priority
}

enum tagsEnum{
  Work
  Home
  Personal
  School
}

enum AttachmentTypeEnum {
  IMAGE
  DOCUMENT
  AUDIO
  VIDEO
}

enum WorkspaceType {
  PERSONAL
  PROFESSIONAL
}

model WorkspaceMember {
  id          String     @id @default(uuid())
  role        MemberRole @default(MEMBER)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relationships
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

model SubTask {
  id          String   @id @default(uuid())
  title       String
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  taskId      String
  task        Tasks     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}